//
// Created by turtlebot on 16.09.20.
//

#ifndef SRC_LFE_NAV_CONFIG_H
#define SRC_LFE_NAV_CONFIG_H

//ros
#include <ros/console.h>
#include <ros/ros.h>

//boost
#include <boost/thread/mutex.hpp>

//internal
#include <turtlebot2i_lfe_navigation/LfeNavReconfigureConfig.h>

namespace lfe_navigation {

    class LfeNavConfig {

    public:

        struct Navigation {
            double goal1_pos_x; //!< x coordinate of goal1 position
            double goal1_pos_y; //!< y coordinate of goal1 position
            double goal1_pos_z; //!< z coordinate of goal1 position
            double goal1_orientation; //!< goal1 orientation as radian for z axis
            double goal2_pos_x; //!< x coordinate of goal2 position
            double goal2_pos_y; //!< y coordinate of goal2 position
            double goal2_pos_z; //!< z coordinate of goal2 position
            double goal2_orientation; //!< goal2 orientation as radian for z axis
        } navigation; //!< Navigation related parameters

        struct HumanRobotInteraction {
            bool backOff; //!< Is true, if a Back Off (BO) motion cue shall be performed upon a human-robot encounter. Is false, if the Stop (ST) motion cue shall be performed.
            int wait_duration; //!< number of seconds to wait until the robot continues after the performed motion cue
            double motion_cue_distance; //!< desired distance between human and robot in meters, when the motion cue shall be triggered
            int human_motion_frame_distance; //!< The distance with which a person approaches the robot from frame to frame in cm. This value indicates the reliability with which a human is detected. A low value will detect humans more reliably at the cost of detecting 'fake' humans as well. The higher the value, the faster the people need to approach the robot in order to be detected.
        } hri; //!< HRI related parameters

        struct BackOff {
            double back1_velocity; //!< Velocity of first backwards movement in m/s. Can be between -0.7 and 0. Value should be negative.
            double forw_velocity; //!< Velocity of the forward movement in m/s. Can be between 0 and 0.7.
            double back2_velocity; //!< Velocity of the second backwards movement in m/s. Can be between -0.7 and 0. Value should be negative.
            double back1_duration; //!< Duration of first backwards movement in seconds.
            double forw_duration; //!< Duration of the forward movement in seconds.
            double back2_duration; //!< Duration of the second backwards movement in seconds.
        } backOff; //!< BackOff related parameters

        /**
        * @brief Construct the LfeNavConfig using default values.
        * @warning If the \b rosparam server or/and \b dynamic_reconfigure (rqt_reconfigure) node are used,
        *	     the default variables will be overwritten: \n
        */
        LfeNavConfig() {

            //navigation
            navigation.goal1_pos_x = 2.0; //kraftraum, astra_sdk: -1.22 //allraumtest: -0.78  //rtabmaphome: 2.0
            navigation.goal1_pos_y = -3.3; //kraftraum, astra_sdk:-1.79 //allraumtest: -1.94 //rthabmaphome: -3.3
            navigation.goal1_pos_z = 0.0;
            navigation.goal1_orientation = 0.0;

            navigation.goal2_pos_x = 0.4; //kraftraum, astra_sdk:3.2 //allraumtest: 1.57 //rtabmaphome: 0.4
            navigation.goal2_pos_y = -0.95; //kraftraum, astra_sdk:0.56 //allraumtest: 0.77 //rtabmaphome: -0.95
            navigation.goal2_pos_z = 0.0;
            navigation.goal2_orientation = 0.0;

            //human-robot-interaction
            hri.backOff = true;
            hri.wait_duration = 2;
            hri.motion_cue_distance = 1.60;
            hri.human_motion_frame_distance = 3;

            //back-off
            backOff.back1_velocity = -0.3;
            backOff.forw_velocity = 0.5;
            backOff.back2_velocity = -0.3;
            backOff.back1_duration = 1;
            backOff.forw_duration = 0.5;
            backOff.back2_duration = 0.5;

        }

        /**
         * @brief Load parmeters from the ros param server.
         * @param nh const reference to the local ros::NodeHandle
         */
        void loadRosParamFromNodeHandle(const ros::NodeHandle& nh);

        /**
         * @brief Reconfigure parameters from the dynamic_reconfigure config.
         * Change parameters dynamically (e.g. with <c>rosrun rqt_reconfigure rqt_reconfigure</c>).
         * A reconfigure server needs to be instantiated that calls this method in it's callback.
         * In case of the package \e lfe_navigation default values are defined
         * in \e PROJECT_SRC/cfg/LfeNavReconfigure.cfg.
         * @param cfg Config class autogenerated by dynamic_reconfigure according to the cfg-file mentioned above.
         */
        void reconfigure(turtlebot2i_lfe_navigation::LfeNavReconfigureConfig& cfg);

        /**
         * @brief Return the internal config mutex
         */
        boost::mutex& configMutex() {return config_mutex_;}

    private:
        boost::mutex config_mutex_; //!< Mutex for config accesses and changes

    };
};


#endif //SRC_LFE_NAV_CONFIG_H
